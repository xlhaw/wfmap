{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to wfmap Documentation \u00b6 Introduction \u00b6 wfmap helps you understand wafer process data better, by presenting the data with heatmap and trend charts by flash field/shot. You can identify abnormal patterns intuitively in a global perspective and make it easier to compare and find potential correlation between different wafer parameters. This documentation provides comprehensive introduction from Data Preparation to Various Examples . Example Gallery introduces you to the ability to use the APIs of wfmap with the demo data enclosed. You can dive it deeper by reading the API Reference or even the source code . A GUI application WaferViz is also built for non-technical users. Let\u2019s roll! Installation \u00b6 It\u2019s recommended to install wfmap via PyPI using pip: pip install wfmap or build the latest build from Github: git clone https://github.com/xlhaw/wfmap.git cd wfmap python setup.py install A GUI application built with Gooey is also shipped together, you can launch it from command line: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Please read the WaferViz for more details. Tutorials \u00b6 It\u2019s a good start to learn the basic usage of this package from Example Gallery , which contains various examples from basic heatmap to highly customized wafer map & trend charts. All examples & images were generated by mkdocs-gallery . WaferMap `wafermap` DefectMap `defectmap` IncomingMap WIF Trend `wif_trend` TwinY Trends `twin_trends` WIF Corrrelation Plot `wif_corrplot`","title":"Getting Started"},{"location":"#welcome-to-wfmap-documentation","text":"","title":"Welcome to wfmap Documentation"},{"location":"#introduction","text":"wfmap helps you understand wafer process data better, by presenting the data with heatmap and trend charts by flash field/shot. You can identify abnormal patterns intuitively in a global perspective and make it easier to compare and find potential correlation between different wafer parameters. This documentation provides comprehensive introduction from Data Preparation to Various Examples . Example Gallery introduces you to the ability to use the APIs of wfmap with the demo data enclosed. You can dive it deeper by reading the API Reference or even the source code . A GUI application WaferViz is also built for non-technical users. Let\u2019s roll!","title":"Introduction"},{"location":"#installation","text":"It\u2019s recommended to install wfmap via PyPI using pip: pip install wfmap or build the latest build from Github: git clone https://github.com/xlhaw/wfmap.git cd wfmap python setup.py install A GUI application built with Gooey is also shipped together, you can launch it from command line: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Please read the WaferViz for more details.","title":"Installation"},{"location":"#tutorials","text":"It\u2019s a good start to learn the basic usage of this package from Example Gallery , which contains various examples from basic heatmap to highly customized wafer map & trend charts. All examples & images were generated by mkdocs-gallery . WaferMap `wafermap` DefectMap `defectmap` IncomingMap WIF Trend `wif_trend` TwinY Trends `twin_trends` WIF Corrrelation Plot `wif_corrplot`","title":"Tutorials"},{"location":"changelog/","text":"Changelogs \u00b6 All notable changes to the wfmap package will be documented in this file. [1.0.3] \u00b6 Bug Fixes \u00b6 Fix matplotlib warning Thanks to @benfroelich , fix bug where wafermap fn wasn\u2019t passing on non-default coord col names #6 Fix legend display issue in wif_trends and add limitation on max items to plot Features \u00b6 Add new param majority in wif_trend for control Add wif_corrplot for correlation plot Documentation Site https://www.wfmap.ml [1.0.2] \u00b6 Bug Fixes \u00b6 Unify the behaviors of grid lines when different matplotlib styles were applied Fix default title of create_incmap to None [1.0.0] \u00b6 Features \u00b6 Add more customized wafer heatmap and trend charts, such as DefectMap, IncomingMap, Trend Charts by Flash Field/Shot Add demo GUI program built with Gooey Add demo data and examples Changed \u00b6 Refactor original wafermap function to num_heatmap & cat_heatmap by numerical & categorical variables respectively Improve the documentation and tutorials :vulcan_salute: [0.0.7] \u00b6 Added \u00b6 Add color histogram subplot for Wafer heatmap Add pie chart inset and yield annotation for categorical variables [0.0.1] \u00b6 First release. \ud83c\udf89\ud83c\udf89\ud83c\udf89","title":"ChangeLogs"},{"location":"changelog/#changelogs","text":"All notable changes to the wfmap package will be documented in this file.","title":"Changelogs"},{"location":"changelog/#103","text":"","title":"[1.0.3]"},{"location":"changelog/#bug-fixes","text":"Fix matplotlib warning Thanks to @benfroelich , fix bug where wafermap fn wasn\u2019t passing on non-default coord col names #6 Fix legend display issue in wif_trends and add limitation on max items to plot","title":"Bug Fixes"},{"location":"changelog/#features","text":"Add new param majority in wif_trend for control Add wif_corrplot for correlation plot Documentation Site https://www.wfmap.ml","title":"Features"},{"location":"changelog/#102","text":"","title":"[1.0.2]"},{"location":"changelog/#bug-fixes_1","text":"Unify the behaviors of grid lines when different matplotlib styles were applied Fix default title of create_incmap to None","title":"Bug Fixes"},{"location":"changelog/#100","text":"","title":"[1.0.0]"},{"location":"changelog/#features_1","text":"Add more customized wafer heatmap and trend charts, such as DefectMap, IncomingMap, Trend Charts by Flash Field/Shot Add demo GUI program built with Gooey Add demo data and examples","title":"Features"},{"location":"changelog/#changed","text":"Refactor original wafermap function to num_heatmap & cat_heatmap by numerical & categorical variables respectively Improve the documentation and tutorials :vulcan_salute:","title":"Changed"},{"location":"changelog/#007","text":"","title":"[0.0.7]"},{"location":"changelog/#added","text":"Add color histogram subplot for Wafer heatmap Add pie chart inset and yield annotation for categorical variables","title":"Added"},{"location":"changelog/#001","text":"First release. \ud83c\udf89\ud83c\udf89\ud83c\udf89","title":"[0.0.1]"},{"location":"data/","text":"Data Preparation \u00b6 This chapter will guide you through the preparation of wafer data. You will get an overview of the data format used in wfmap , learn the wafer mapping definition in detail and how to merge it with other data source. Definition \u00b6 Wafer mapping definition used in this package is showed in follwing table, which might be slightly different as the terminology in your industry. Parameter Definition Data Type MAP_ROW y : vertical coordinate of the die in the wafermap Integer MAP_COL x : horizontal coordinate of the die in the wafermap Integer FF_ROW yn : vertical coordinate of flash field Integer FF_COL xn : horizontal coordinate of flash field Integer WIF_ROW vertical coordinate of the die in the corresponding flash field Integer WIF_COL horizontal coordinate of the die in the corresponding flash field Integer FF_SHAPE (max(FF_ROW),max(FF_COL)): Total Flash Fields by FF Row&Col Tuple FF_SIZE (max(WIF_ROW),max(WIF_COL)): Total Dies in a Flash Field by Die Row&Col Tuple FF is short for FlashField , WIF stands for Within FlashField . Warning First two parameters are required in wafer heatmap related plots and succedent 4 parameters are need for trends charts related plots. So please make sure that you have either transformed your data in similar format or pass the correct parameters to corresponding functions. Below is an illustration for above definition. Sample Data \u00b6 Sample data is shipped within this packages, you can load it as following snippet: from wfmap.data import load_data data = load_data () Besides the first 6 columns which define the wafer mapping information, additional 1 categorical feature DEFECT & 4 numerial features( MR , HR , HDI , MR2 ) are included for demostration. data . head () Merge Other Data \u00b6 In most common scenario, wafer data from other source is processed and stored separately by unique DeviceID such as OCR , rather than wafer data MAP_ROW & MAP_COL . Since wafer map definition is not included, You\u2019ll need to merge it with wafer map data manually. In my practice, I saved the wafer mapping data as pickle file by different wafer type in advance. Then can load it from local directory, no need to read corresponding wafer data from file server or database. Here\u2019s a sample snippets for your reference, which enable to merge the wafer map data from either local pickle file or extract it from wafer incoming data. from wfdata import Wafer # Load for Wafer Incoming Data def merge_wfmap ( df , ocr_col = 'SLIDER_OCR_NO' , mode = 'AUTO' , join = 'outer' , inc_data = False , map_dir = 'D:\\MAP_DATA' ): \"\"\" `SLIDER_OCR_NO` = `Wafer` + `OCR` \"\"\" assert mode in [ 'AUTO' , 'UP' , 'UP2' , 'UP3' , 'UP2S' , 'UP3S' ], print ( 'Wafer Format Not Suppported!!' ) assert join in [ 'inner' , 'outer' ], print ( 'Merge Method Not Suppported!!' ) df [ 'Wafer' ] = df [ ocr_col ] . map ( lambda x : x [: 5 ]) df [ 'OCR' ] = df [ ocr_col ] . map ( lambda x : x [ - 5 :]) df . set_index ( 'OCR' , inplace = True ) result = [] for wf , dff in df . groupby ( 'Wafer' ): if mode == 'AUTO' : if inc_data : map_data = Wafer ( \"H\" + wf ) . inc_data () else : map_data = Wafer ( \"H\" + wf ) . map_data () else : map_data = pd . read_pickle ( f ' { map_dir } / { mode } ' ) merged = pd . merge ( map_data , dff , right_index = True , left_index = True , how = join ) merged = merged . drop_duplicates ( subset = [ 'MAP_ROW' , 'MAP_COL' ]) result . append ( merged ) return pd . concat ( result )","title":"Data Preparation"},{"location":"data/#data-preparation","text":"This chapter will guide you through the preparation of wafer data. You will get an overview of the data format used in wfmap , learn the wafer mapping definition in detail and how to merge it with other data source.","title":"Data Preparation"},{"location":"data/#definition","text":"Wafer mapping definition used in this package is showed in follwing table, which might be slightly different as the terminology in your industry. Parameter Definition Data Type MAP_ROW y : vertical coordinate of the die in the wafermap Integer MAP_COL x : horizontal coordinate of the die in the wafermap Integer FF_ROW yn : vertical coordinate of flash field Integer FF_COL xn : horizontal coordinate of flash field Integer WIF_ROW vertical coordinate of the die in the corresponding flash field Integer WIF_COL horizontal coordinate of the die in the corresponding flash field Integer FF_SHAPE (max(FF_ROW),max(FF_COL)): Total Flash Fields by FF Row&Col Tuple FF_SIZE (max(WIF_ROW),max(WIF_COL)): Total Dies in a Flash Field by Die Row&Col Tuple FF is short for FlashField , WIF stands for Within FlashField . Warning First two parameters are required in wafer heatmap related plots and succedent 4 parameters are need for trends charts related plots. So please make sure that you have either transformed your data in similar format or pass the correct parameters to corresponding functions. Below is an illustration for above definition.","title":"Definition"},{"location":"data/#sample-data","text":"Sample data is shipped within this packages, you can load it as following snippet: from wfmap.data import load_data data = load_data () Besides the first 6 columns which define the wafer mapping information, additional 1 categorical feature DEFECT & 4 numerial features( MR , HR , HDI , MR2 ) are included for demostration. data . head ()","title":"Sample Data"},{"location":"data/#merge-other-data","text":"In most common scenario, wafer data from other source is processed and stored separately by unique DeviceID such as OCR , rather than wafer data MAP_ROW & MAP_COL . Since wafer map definition is not included, You\u2019ll need to merge it with wafer map data manually. In my practice, I saved the wafer mapping data as pickle file by different wafer type in advance. Then can load it from local directory, no need to read corresponding wafer data from file server or database. Here\u2019s a sample snippets for your reference, which enable to merge the wafer map data from either local pickle file or extract it from wafer incoming data. from wfdata import Wafer # Load for Wafer Incoming Data def merge_wfmap ( df , ocr_col = 'SLIDER_OCR_NO' , mode = 'AUTO' , join = 'outer' , inc_data = False , map_dir = 'D:\\MAP_DATA' ): \"\"\" `SLIDER_OCR_NO` = `Wafer` + `OCR` \"\"\" assert mode in [ 'AUTO' , 'UP' , 'UP2' , 'UP3' , 'UP2S' , 'UP3S' ], print ( 'Wafer Format Not Suppported!!' ) assert join in [ 'inner' , 'outer' ], print ( 'Merge Method Not Suppported!!' ) df [ 'Wafer' ] = df [ ocr_col ] . map ( lambda x : x [: 5 ]) df [ 'OCR' ] = df [ ocr_col ] . map ( lambda x : x [ - 5 :]) df . set_index ( 'OCR' , inplace = True ) result = [] for wf , dff in df . groupby ( 'Wafer' ): if mode == 'AUTO' : if inc_data : map_data = Wafer ( \"H\" + wf ) . inc_data () else : map_data = Wafer ( \"H\" + wf ) . map_data () else : map_data = pd . read_pickle ( f ' { map_dir } / { mode } ' ) merged = pd . merge ( map_data , dff , right_index = True , left_index = True , how = join ) merged = merged . drop_duplicates ( subset = [ 'MAP_ROW' , 'MAP_COL' ]) result . append ( merged ) return pd . concat ( result )","title":"Merge Other Data"},{"location":"docstrings/","text":"Below API docs are auto-generated by mkdocstrings . num_heatmap ( df , value , row = 'MAP_ROW' , col = 'MAP_COL' , cmap = 'jet' , title = None , vlim = None , vsigma = None , vrange = None , ax = None ) \u00b6 Create Wafer Heatmap for Numerical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' cmap str ColorMap 'jet' title str Title None vlim tuple (zmin,zmax) limits of the colorbar, will ignore the vsigma/vrange if provided None vsigma float colorbar range is center mean\u00b13*vsigma if vsigma is provided None vrange float Range of the colorbar, works when vlim is not available and ignore the vsigma None ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes cat_heatmap ( df , item , row = 'MAP_ROW' , col = 'MAP_COL' , title = None , code_dict = None , qty_limit = 10 , colors = DEFECT_COLORS , verbose = False , ax = None ) \u00b6 Create Wafer Heatmap for Categorical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required item str Column name of the categorical variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None qty_limit int add restrictions on the total unique variables to plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS verbose bool Return the summary of categorical data or not. False ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes and additional data if verbose is True wafermap ( df , value , row = 'MAP_ROW' , col = 'MAP_COL' , title = None , vrange = None , vsigma = None , wftype = None ) \u00b6 Create Wafer Heatmap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None vrange float Range of Y-axis/Colorbar, will overide the vsigma setting None vsigma float color bar range is center mean\u00b13*vsigma if vsigma is provided None wftype str Wafer Layout Type , Plot additional trend chart if provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure defectmap ( df , defect_col , ok_codes = [ 'OK' , 'BINA' ], code_dict = None , row = 'MAP_ROW' , col = 'MAP_COL' , qty_limit = 10 , colors = DEFECT_COLORS , title = None ) \u00b6 Create Wafer DefectMap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required defect_col str Column name of the defect code required ok_codes list list of code being treated as \u2018OK\u2019 ['OK', 'BINA'] code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' qty_limit int add restrictions on the total unique variables to show in the plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure wif_trend ( df , y , x = 'WIF_COL' , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , majority = 90 , method = 'median' , title = None , ylim = None , yrange = None , color = 'b' , style = '.' ) \u00b6 Create Wafer Trend Chart by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the numeric variable to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' majority int Center Percentage of Population used for Estimation 90 method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None color str Color of the trend line 'b' style str Style of the trend line '.' Returns: Name Type Description fig matplotlib . figure . Figure Figure wif_trends ( df , ys , x = 'WIF_COL' , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , method = 'median' , title = None , ylim = None , yrange = None ) \u00b6 Create Wafer Trend Charts by Flash Field (when numerical variables share similar ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required ys list List of column names to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure twin_trends ( df , y , ty , x = 'WIF_COL' , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , method = 'median' , title = None , yrange = None , tyrange = None , fix_scale = True ) \u00b6 Create Wafer Trend Charts by Flash Field (when two variables have very different ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the variable to plot on the primary axis required ty str Column name of the variable to plot on the secondary axis required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None yrange float Range of Y-axis None tyrange float Range of 2nd Y-axis None fix_scale bool Keep the same scale or Not True Returns: Name Type Description fig matplotlib . figure . Figure Figure wif_corrplot ( df , x , y , yn = 'FF_ROW' , xn = 'FF_COL' , wftype = 'UP2' , fit_deg = 1 , title = None ) \u00b6 Create Correlation Plot between two continuous variables by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required x str Column name(and x_label) of x-axis required y str Column name of the variable to plot on the primary axis required yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' fit_deg int Polynomial fit degree 1 title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"API Reference"},{"location":"docstrings/#wfmap.num_heatmap","text":"Create Wafer Heatmap for Numerical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' cmap str ColorMap 'jet' title str Title None vlim tuple (zmin,zmax) limits of the colorbar, will ignore the vsigma/vrange if provided None vsigma float colorbar range is center mean\u00b13*vsigma if vsigma is provided None vrange float Range of the colorbar, works when vlim is not available and ignore the vsigma None ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes","title":"num_heatmap()"},{"location":"docstrings/#wfmap.cat_heatmap","text":"Create Wafer Heatmap for Categorical Variable Parameters: Name Type Description Default df pd . DataFrame Wafer Data required item str Column name of the categorical variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None qty_limit int add restrictions on the total unique variables to plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS verbose bool Return the summary of categorical data or not. False ax matplotlib . axes Axe to plot on None Returns: Name Type Description ax matplotlib . axes Matplotlib Axes and additional data if verbose is True","title":"cat_heatmap()"},{"location":"docstrings/#wfmap.wafermap","text":"Create Wafer Heatmap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required value str Column name of the numeric variable required row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' title str Title None vrange float Range of Y-axis/Colorbar, will overide the vsigma setting None vsigma float color bar range is center mean\u00b13*vsigma if vsigma is provided None wftype str Wafer Layout Type , Plot additional trend chart if provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wafermap()"},{"location":"docstrings/#wfmap.defectmap","text":"Create Wafer DefectMap Parameters: Name Type Description Default df pd . DataFrame Wafer Data required defect_col str Column name of the defect code required ok_codes list list of code being treated as \u2018OK\u2019 ['OK', 'BINA'] code_dict dict {\u2018orignal\u2019:\u2019new_code\u2019} Replace original code with code_dict None row str Wafer Map Row (Y Coordinate) 'MAP_ROW' col str Wafer Map Col (X Coordinate) 'MAP_COL' qty_limit int add restrictions on the total unique variables to show in the plot 10 colors list [\u2018lightgreen\u2019, \u2018red\u2019, \u2018orange\u2019, \u2018blue\u2019, \u2018purple\u2019, \u2018cyan\u2019, \u2018pink\u2019, \u2018yellow\u2019, \u2018lightblue\u2019, \u2018gold\u2019, \u2018darkblue\u2019, \u2018gray\u2019, \u2018darkred\u2019, \u2018black\u2019] DEFECT_COLORS title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"defectmap()"},{"location":"docstrings/#wfmap.wif_trend","text":"Create Wafer Trend Chart by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the numeric variable to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' majority int Center Percentage of Population used for Estimation 90 method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None color str Color of the trend line 'b' style str Style of the trend line '.' Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wif_trend()"},{"location":"docstrings/#wfmap.wif_trends","text":"Create Wafer Trend Charts by Flash Field (when numerical variables share similar ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required ys list List of column names to plot required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None ylim tuple (ymin:float,ymax:float) None yrange float Range of Y-axis, ignored if ylim is provided None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wif_trends()"},{"location":"docstrings/#wfmap.twin_trends","text":"Create Wafer Trend Charts by Flash Field (when two variables have very different ranges) Parameters: Name Type Description Default df pd . DataFrame Wafer Data required y str Column name of the variable to plot on the primary axis required ty str Column name of the variable to plot on the secondary axis required x str Column name(and x_label) of x-axis 'WIF_COL' yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' method str \u2018mean\u2019 or \u2018median\u2019 Trend 'median' title str Title None yrange float Range of Y-axis None tyrange float Range of 2nd Y-axis None fix_scale bool Keep the same scale or Not True Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"twin_trends()"},{"location":"docstrings/#wfmap.wif_corrplot","text":"Create Correlation Plot between two continuous variables by Flash Field Parameters: Name Type Description Default df pd . DataFrame Wafer Data required x str Column name(and x_label) of x-axis required y str Column name of the variable to plot on the primary axis required yn str Y Coordinate of Flash Field/Subplot 'FF_ROW' xn str X Coordinate of Flash Field/Subplot 'FF_COL' wftype str Wafer Layout Type [\u2018UP\u2019|\u2019UP2\u2019|\u2019UP3\u2019|\u2019UP2E\u2019|\u2019UP3E\u2019] 'UP2' fit_deg int Polynomial fit degree 1 title str Title None Returns: Name Type Description fig matplotlib . figure . Figure Figure","title":"wif_corrplot()"},{"location":"gui/","text":"WaferViz \u00b6 WaferViz is a small GUI tool which wraps wfmap to create fancy Wafer Map/Trend Plots. Installation \u00b6 Launch the application from command line as below: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Since the package size by Pyinstaller is huge, the pre-compiled binary is not uploaded. Plan to rewrite with other approaches, eg Tauri/Pyodide/Quarto to package & distribute it in the future. Configuration \u00b6 Default settings are saved in the config.yml file, open with any text editor if need modification. Basic Usage \u00b6 Data Download \u00b6 WaferMap \u00b6 DefectMap \u00b6 IncomingMap \u00b6 WIF Trend \u00b6 WIF Trends \u00b6 TwinY Trends \u00b6","title":"GUI Application"},{"location":"gui/#waferviz","text":"WaferViz is a small GUI tool which wraps wfmap to create fancy Wafer Map/Trend Plots.","title":"WaferViz"},{"location":"gui/#installation","text":"Launch the application from command line as below: git clone https://github.com/xlhaw/wfmap.git cd wfmap/gui pip install -r requirements.txt python main.py Since the package size by Pyinstaller is huge, the pre-compiled binary is not uploaded. Plan to rewrite with other approaches, eg Tauri/Pyodide/Quarto to package & distribute it in the future.","title":"Installation"},{"location":"gui/#configuration","text":"Default settings are saved in the config.yml file, open with any text editor if need modification.","title":"Configuration"},{"location":"gui/#basic-usage","text":"","title":"Basic Usage"},{"location":"gui/#data-download","text":"","title":"Data Download"},{"location":"gui/#wafermap","text":"","title":"WaferMap"},{"location":"gui/#defectmap","text":"","title":"DefectMap"},{"location":"gui/#incomingmap","text":"","title":"IncomingMap"},{"location":"gui/#wif-trend","text":"","title":"WIF Trend"},{"location":"gui/#wif-trends","text":"","title":"WIF Trends"},{"location":"gui/#twiny-trends","text":"","title":"TwinY Trends"},{"location":"generated/gallery/","text":"Example Gallery \u00b6 This page contains example plots that wfmap can create. Click on any image to see the full image and source code. More detailed information about each parameter is then provided in the API Reference Categorical Heatmap `cat_heatmap` WIF Trends `wif_trends` WaferMap `wafermap` IncomingMap WIF Trend `wif_trend` DefectMap `defectmap` WIF Corrrelation Plot `wif_corrplot` TwinY Trends `twin_trends` Numerical Heatmap `num_heatmap` Download all examples in Python source code: gallery_python.zip Download all examples in Jupyter notebooks: gallery_jupyter.zip Gallery generated by mkdocs-gallery","title":"Example Gallery"},{"location":"generated/gallery/#example-gallery","text":"This page contains example plots that wfmap can create. Click on any image to see the full image and source code. More detailed information about each parameter is then provided in the API Reference Categorical Heatmap `cat_heatmap` WIF Trends `wif_trends` WaferMap `wafermap` IncomingMap WIF Trend `wif_trend` DefectMap `defectmap` WIF Corrrelation Plot `wif_corrplot` TwinY Trends `twin_trends` Numerical Heatmap `num_heatmap` Download all examples in Python source code: gallery_python.zip Download all examples in Jupyter notebooks: gallery_jupyter.zip Gallery generated by mkdocs-gallery","title":"Example Gallery"},{"location":"generated/gallery/mg_execution_times/","text":"Computation times \u00b6 00:57.788 total execution time for generated_gallery files: +----------------------------------------------------------------------------------------+-----------+--------+ | plot_1_cheatmap (docs/examples/plot_1_cheatmap.py) | 00:36.984 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_8_wif_corrplot (docs/examples/plot_8_wif_corrplot.py) | 00:05.227 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_7_twin_trends (docs/examples/plot_7_twin_trends.py) | 00:04.586 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_5_wif_trend (docs/examples/plot_5_wif_trend.py) | 00:03.888 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_6_wif_trends (docs/examples/plot_6_wif_trends.py) | 00:03.681 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_2_wafermap (docs/examples/plot_2_wafermap.py) | 00:00.969 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_4_incmap (docs/examples/plot_4_incmap.py) | 00:00.955 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_0_nheatmap (docs/examples/plot_0_nheatmap.py) | 00:00.793 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_3_defectmap (docs/examples/plot_3_defectmap.py) | 00:00.706 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/mg_execution_times/#computation-times","text":"00:57.788 total execution time for generated_gallery files: +----------------------------------------------------------------------------------------+-----------+--------+ | plot_1_cheatmap (docs/examples/plot_1_cheatmap.py) | 00:36.984 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_8_wif_corrplot (docs/examples/plot_8_wif_corrplot.py) | 00:05.227 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_7_twin_trends (docs/examples/plot_7_twin_trends.py) | 00:04.586 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_5_wif_trend (docs/examples/plot_5_wif_trend.py) | 00:03.888 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_6_wif_trends (docs/examples/plot_6_wif_trends.py) | 00:03.681 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_2_wafermap (docs/examples/plot_2_wafermap.py) | 00:00.969 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_4_incmap (docs/examples/plot_4_incmap.py) | 00:00.955 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_0_nheatmap (docs/examples/plot_0_nheatmap.py) | 00:00.793 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+ | plot_3_defectmap (docs/examples/plot_3_defectmap.py) | 00:00.706 | 0.0 MB | +----------------------------------------------------------------------------------------+-----------+--------+","title":"Computation times"},{"location":"generated/gallery/plot_0_nheatmap/","text":"Note Click here to download the full example code Numerical Heatmap num_heatmap \u00b6 WaferMap for Numerical Variable num_heatmap uses the colormap jet which present high value with hot color(red) and low value with cold value(blue). This example demonstrates how to use the sample data to create simple WaferMap at ease. MAP_ROW & MAP_COL are the default value for wafer row & col , need be replaced if it\u2019s different from your data. import numpy as np from wfmap.data import load_data from wfmap import num_heatmap import matplotlib.pyplot as plt data = load_data () ax = num_heatmap ( data , 'MR' ) plt . tight_layout () Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) Usually, the range of colorbar is auto inferred by majority of center population, which suggests the range might not be consistent for the same parameter by different wafers. If you want to have more subtle colorbar control, you can provide the est.sigma of value vsigma or value range vrange to keep the colorbar to have a fixed range. def auto_vlim ( series , majority = 94 , n_sigma = 3 , vsigma = None , vrange = None ): \"\"\" Infer the best range of a series for plotting \"\"\" low , high = np . percentile ( series . dropna (), [ 50 - majority / 2 , 50 + majority / 2 ]) centers = series . where (( series >= low ) & ( series <= high ), np . nan ) if vsigma == None : vsigma = centers . std () if vrange : vmin = ( low + high - vrange ) / 2 vmax = ( low + high + vrange ) / 2 else : vmax = centers . mean () + n_sigma * vsigma vmin = centers . mean () - n_sigma * vsigma return vmin , vmax Total running time of the script: ( 0 minutes 0.793 seconds) Download Python source code: plot_0_nheatmap.py Download Jupyter notebook: plot_0_nheatmap.ipynb Gallery generated by mkdocs-gallery","title":"Numerical Heatmap `num_heatmap`"},{"location":"generated/gallery/plot_0_nheatmap/#numerical-heatmap-num_heatmap","text":"WaferMap for Numerical Variable num_heatmap uses the colormap jet which present high value with hot color(red) and low value with cold value(blue). This example demonstrates how to use the sample data to create simple WaferMap at ease. MAP_ROW & MAP_COL are the default value for wafer row & col , need be replaced if it\u2019s different from your data. import numpy as np from wfmap.data import load_data from wfmap import num_heatmap import matplotlib.pyplot as plt data = load_data () ax = num_heatmap ( data , 'MR' ) plt . tight_layout () Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) Usually, the range of colorbar is auto inferred by majority of center population, which suggests the range might not be consistent for the same parameter by different wafers. If you want to have more subtle colorbar control, you can provide the est.sigma of value vsigma or value range vrange to keep the colorbar to have a fixed range. def auto_vlim ( series , majority = 94 , n_sigma = 3 , vsigma = None , vrange = None ): \"\"\" Infer the best range of a series for plotting \"\"\" low , high = np . percentile ( series . dropna (), [ 50 - majority / 2 , 50 + majority / 2 ]) centers = series . where (( series >= low ) & ( series <= high ), np . nan ) if vsigma == None : vsigma = centers . std () if vrange : vmin = ( low + high - vrange ) / 2 vmax = ( low + high + vrange ) / 2 else : vmax = centers . mean () + n_sigma * vsigma vmin = centers . mean () - n_sigma * vsigma return vmin , vmax Total running time of the script: ( 0 minutes 0.793 seconds) Download Python source code: plot_0_nheatmap.py Download Jupyter notebook: plot_0_nheatmap.ipynb Gallery generated by mkdocs-gallery","title":"Numerical Heatmap num_heatmap"},{"location":"generated/gallery/plot_1_cheatmap/","text":"Note Click here to download the full example code Categorical Heatmap cat_heatmap \u00b6 WaferMap for Categorical Variable cat_heatmap is essentially a variant of num_heatmap . Internally, the categorical variable is first transformed to integers according to the rank of each unique count. And then plot the heatmap using the intermediate numbers. Below example demonstrates the simplest case of creating a categorical heatmap. You can have more customization by providing code_dict if you want to have some transformation before the plotting, eg. merge some items or change perticular item name. You can also set the qty_limit to control the max items will be presented in the plot, categories which are beyond the qty_limit will be counted together as Others . Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\w in32 \\l ib \\p ywintypes.py:2: DeprecationWarning: the imp module is deprecated in favour of importlib ; see the module 's documentation for alternative uses import imp, sys, os E:\\zwPython\\py37\\python-3.7.4.amd64\\lib\\site-packages\\sphinx\\util\\rst.py:58: DeprecationWarning: ' environmentfilter ' is renamed to ' pass_environment ' , the old name will be removed in Jinja 3 .1. def heading ( env: Environment, text: str, level: int = 1 ) -> str: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) from wfmap.data import load_data from wfmap import cat_heatmap data = load_data () fig = cat_heatmap ( data , 'DEFECT' ) Total running time of the script: ( 0 minutes 36.984 seconds) Download Python source code: plot_1_cheatmap.py Download Jupyter notebook: plot_1_cheatmap.ipynb Gallery generated by mkdocs-gallery","title":"Categorical Heatmap `cat_heatmap`"},{"location":"generated/gallery/plot_1_cheatmap/#categorical-heatmap-cat_heatmap","text":"WaferMap for Categorical Variable cat_heatmap is essentially a variant of num_heatmap . Internally, the categorical variable is first transformed to integers according to the rank of each unique count. And then plot the heatmap using the intermediate numbers. Below example demonstrates the simplest case of creating a categorical heatmap. You can have more customization by providing code_dict if you want to have some transformation before the plotting, eg. merge some items or change perticular item name. You can also set the qty_limit to control the max items will be presented in the plot, categories which are beyond the qty_limit will be counted together as Others . Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\w in32 \\l ib \\p ywintypes.py:2: DeprecationWarning: the imp module is deprecated in favour of importlib ; see the module 's documentation for alternative uses import imp, sys, os E:\\zwPython\\py37\\python-3.7.4.amd64\\lib\\site-packages\\sphinx\\util\\rst.py:58: DeprecationWarning: ' environmentfilter ' is renamed to ' pass_environment ' , the old name will be removed in Jinja 3 .1. def heading ( env: Environment, text: str, level: int = 1 ) -> str: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) from wfmap.data import load_data from wfmap import cat_heatmap data = load_data () fig = cat_heatmap ( data , 'DEFECT' ) Total running time of the script: ( 0 minutes 36.984 seconds) Download Python source code: plot_1_cheatmap.py Download Jupyter notebook: plot_1_cheatmap.ipynb Gallery generated by mkdocs-gallery","title":"Categorical Heatmap cat_heatmap"},{"location":"generated/gallery/plot_2_wafermap/","text":"Note Click here to download the full example code WaferMap wafermap \u00b6 WaferMap with Distribution & Median Trend Subplots WaferMap add additional color distribution plot and trend charts by row/col around basic NumHeatmap.Color distribution plot shares the same limit as colorbar from heatmap. And vertical and horizonal trend charts is only diplayed when wftype is provided, since the grid line are using the pre-defined flash field boundary by wftype . Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) from wfmap.data import load_data from wfmap import wafermap data = load_data () fig = wafermap ( data , 'MR' , wftype = 'UP3' ) Total running time of the script: ( 0 minutes 0.969 seconds) Download Python source code: plot_2_wafermap.py Download Jupyter notebook: plot_2_wafermap.ipynb Gallery generated by mkdocs-gallery","title":"WaferMap `wafermap`"},{"location":"generated/gallery/plot_2_wafermap/#wafermap-wafermap","text":"WaferMap with Distribution & Median Trend Subplots WaferMap add additional color distribution plot and trend charts by row/col around basic NumHeatmap.Color distribution plot shares the same limit as colorbar from heatmap. And vertical and horizonal trend charts is only diplayed when wftype is provided, since the grid line are using the pre-defined flash field boundary by wftype . Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) from wfmap.data import load_data from wfmap import wafermap data = load_data () fig = wafermap ( data , 'MR' , wftype = 'UP3' ) Total running time of the script: ( 0 minutes 0.969 seconds) Download Python source code: plot_2_wafermap.py Download Jupyter notebook: plot_2_wafermap.ipynb Gallery generated by mkdocs-gallery","title":"WaferMap wafermap"},{"location":"generated/gallery/plot_3_defectmap/","text":"Note Click here to download the full example code DefectMap defectmap \u00b6 Wafer DefectMap with Pareto Subplot DefectMap is aimed for defect analysis, beside the defect distribution by cat_heatmap , yield summary and top defect statistics are also applied by using inset pie chart and bar chart subplot. Unlike in the cat_heatmap , categories are ordered by unique count in default. defectmap use the \u2018OK\u2019 as the top category and set it with lightgreen color. You can UAI other codes eg. \u2018BINA\u2019,\u2019BINB\u2019 as OK by update the ok_codes . import random from wfmap.data import load_data from wfmap import defectmap data = load_data () fig = defectmap ( data , 'DEFECT' ) Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) Above example used the default defect code from sample data, you change it to more reader-friendly and meaningful remark by modify the code_dict as below. code_dict = {} for code in data [ 'DEFECT' ] . unique (): if code . startswith ( 'S' ): code_dict [ code ] = random . choice ( [ 'QST Rej' , 'HDD Rej' , 'DP Rej' , 'VM Rej' ]) fig2 = defectmap ( data , 'DEFECT' , code_dict = code_dict ) Traceback (most recent call last): File \"F:/wfmap/docs/examples/plot_3_defectmap.py\" , line 28 , in <module> fig2 = defectmap ( data , 'DEFECT' , code_dict = code_dict ) TypeError : defectmap() got an unexpected keyword argument 'code_dict' Total running time of the script: ( 0 minutes 0.706 seconds) Download Python source code: plot_3_defectmap.py Download Jupyter notebook: plot_3_defectmap.ipynb Gallery generated by mkdocs-gallery","title":"DefectMap `defectmap`"},{"location":"generated/gallery/plot_3_defectmap/#defectmap-defectmap","text":"Wafer DefectMap with Pareto Subplot DefectMap is aimed for defect analysis, beside the defect distribution by cat_heatmap , yield summary and top defect statistics are also applied by using inset pie chart and bar chart subplot. Unlike in the cat_heatmap , categories are ordered by unique count in default. defectmap use the \u2018OK\u2019 as the top category and set it with lightgreen color. You can UAI other codes eg. \u2018BINA\u2019,\u2019BINB\u2019 as OK by update the ok_codes . import random from wfmap.data import load_data from wfmap import defectmap data = load_data () fig = defectmap ( data , 'DEFECT' ) Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) Above example used the default defect code from sample data, you change it to more reader-friendly and meaningful remark by modify the code_dict as below. code_dict = {} for code in data [ 'DEFECT' ] . unique (): if code . startswith ( 'S' ): code_dict [ code ] = random . choice ( [ 'QST Rej' , 'HDD Rej' , 'DP Rej' , 'VM Rej' ]) fig2 = defectmap ( data , 'DEFECT' , code_dict = code_dict ) Traceback (most recent call last): File \"F:/wfmap/docs/examples/plot_3_defectmap.py\" , line 28 , in <module> fig2 = defectmap ( data , 'DEFECT' , code_dict = code_dict ) TypeError : defectmap() got an unexpected keyword argument 'code_dict' Total running time of the script: ( 0 minutes 0.706 seconds) Download Python source code: plot_3_defectmap.py Download Jupyter notebook: plot_3_defectmap.ipynb Gallery generated by mkdocs-gallery","title":"DefectMap defectmap"},{"location":"generated/gallery/plot_4_incmap/","text":"Note Click here to download the full example code IncomingMap \u00b6 Combined WaferMap for Wafer Incoming Data IncomingMap is an horizontal concatenation of multiple WaferMap for wafer incoming data. vsigmas is a dict which collects the estimated value sigma for heatmap/colorbar range determination. Items which only lists in the vsigmas will be plotted. You can adjust the vsigmas & title to customize your own wafermap combination. Below is a simple IncomingMap which contains two variables MR & HDI only. Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) from wfmap.data import load_data from wfmap import create_incmap data = load_data () fig = create_incmap ( data , vsigmas = { 'MR' : 10 , 'HDI' : 1 }) Total running time of the script: ( 0 minutes 0.955 seconds) Download Python source code: plot_4_incmap.py Download Jupyter notebook: plot_4_incmap.ipynb Gallery generated by mkdocs-gallery","title":"IncomingMap"},{"location":"generated/gallery/plot_4_incmap/#incomingmap","text":"Combined WaferMap for Wafer Incoming Data IncomingMap is an horizontal concatenation of multiple WaferMap for wafer incoming data. vsigmas is a dict which collects the estimated value sigma for heatmap/colorbar range determination. Items which only lists in the vsigmas will be plotted. You can adjust the vsigmas & title to customize your own wafermap combination. Below is a simple IncomingMap which contains two variables MR & HDI only. Out: E: \\z wPython \\p y37 \\p ython-3.7.4.amd64 \\l ib \\s ite-packages \\s eaborn \\m atrix.py:70: DeprecationWarning: ` np.bool ` is a deprecated alias for the builtin ` bool ` . To silence this warning, use ` bool ` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use ` np.bool_ ` here. Deprecated in NumPy 1 .20 ; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations mask = np.zeros ( data.shape, np.bool ) from wfmap.data import load_data from wfmap import create_incmap data = load_data () fig = create_incmap ( data , vsigmas = { 'MR' : 10 , 'HDI' : 1 }) Total running time of the script: ( 0 minutes 0.955 seconds) Download Python source code: plot_4_incmap.py Download Jupyter notebook: plot_4_incmap.ipynb Gallery generated by mkdocs-gallery","title":"IncomingMap"},{"location":"generated/gallery/plot_5_wif_trend/","text":"Note Click here to download the full example code WIF Trend wif_trend \u00b6 Wafer Trend Charts by Flash Field For Single Variable WIF Trend gives you a clear view of within flash field & field to field tendency and distribution. Anormal waving or mountain shape pattern and shot-jump pattern could be easily spotted with this chart. Blue line is median trend by default which is less impacted by outliers, and orange area indicates the major distribution at the same WIF_COL . ```{.python from wfmap.data import load_data from wfmap import wif_trend data = load_data() fig = wif_trend(data, \u2018MR\u2019) ![plot 5 wif trend](./images/mkd_glr_plot_5_wif_trend_001.png){: .mkd-glr-single-img srcset=\"../images/mkd_glr_plot_5_wif_trend_001.png\"} <!-- GENERATED FROM PYTHON SOURCE LINES 18-19 --> The size of orange area is determined by `majority`, which means the center percentage of the whole distribution. To achieve similar quantile as boxplot could set `majority=50`. <!-- GENERATED FROM PYTHON SOURCE LINES 19-22 --> ```{.python fig2 = wif_trend(data, 'MR', majority=50) {.pytb Traceback (most recent call last): File \"F:/wfmap/docs/examples/plot_5_wif_trend.py\", line 21, in <module> fig2 = wif_trend(data, 'MR', majority=50) TypeError: wif_trend() got an unexpected keyword argument 'majority' Total running time of the script: ( 0 minutes 3.888 seconds) Download Python source code: plot_5_wif_trend.py Download Jupyter notebook: plot_5_wif_trend.ipynb Gallery generated by mkdocs-gallery","title":"WIF Trend `wif_trend`"},{"location":"generated/gallery/plot_5_wif_trend/#wif-trend-wif_trend","text":"Wafer Trend Charts by Flash Field For Single Variable WIF Trend gives you a clear view of within flash field & field to field tendency and distribution. Anormal waving or mountain shape pattern and shot-jump pattern could be easily spotted with this chart. Blue line is median trend by default which is less impacted by outliers, and orange area indicates the major distribution at the same WIF_COL . ```{.python from wfmap.data import load_data from wfmap import wif_trend data = load_data() fig = wif_trend(data, \u2018MR\u2019) ![plot 5 wif trend](./images/mkd_glr_plot_5_wif_trend_001.png){: .mkd-glr-single-img srcset=\"../images/mkd_glr_plot_5_wif_trend_001.png\"} <!-- GENERATED FROM PYTHON SOURCE LINES 18-19 --> The size of orange area is determined by `majority`, which means the center percentage of the whole distribution. To achieve similar quantile as boxplot could set `majority=50`. <!-- GENERATED FROM PYTHON SOURCE LINES 19-22 --> ```{.python fig2 = wif_trend(data, 'MR', majority=50) {.pytb Traceback (most recent call last): File \"F:/wfmap/docs/examples/plot_5_wif_trend.py\", line 21, in <module> fig2 = wif_trend(data, 'MR', majority=50) TypeError: wif_trend() got an unexpected keyword argument 'majority' Total running time of the script: ( 0 minutes 3.888 seconds) Download Python source code: plot_5_wif_trend.py Download Jupyter notebook: plot_5_wif_trend.ipynb Gallery generated by mkdocs-gallery","title":"WIF Trend wif_trend"},{"location":"generated/gallery/plot_6_wif_trends/","text":"Note Click here to download the full example code WIF Trends wif_trends \u00b6 Wafer Trend Charts by Flash Field For Multiple Variables Slightly different from wif_trend , WIF Trends removes the orange area highlight for major distribution and focus on the median trend comparison between different variables. Further, for the sake of brevity and aesthetics, max number of variables to plot is limited to 4. Below is an example trend chart of the wafer level MR Resistence for both R1 & R2. Please be noted this chart is only recommended for variables which share similar range. When the mean or sigma is much different, please consider using the twin_trends instead. from wfmap.data import load_data from wfmap import wif_trends data = load_data () fig = wif_trends ( data , [ 'MR' , 'MR2' ]) Total running time of the script: ( 0 minutes 3.681 seconds) Download Python source code: plot_6_wif_trends.py Download Jupyter notebook: plot_6_wif_trends.ipynb Gallery generated by mkdocs-gallery","title":"WIF Trends `wif_trends`"},{"location":"generated/gallery/plot_6_wif_trends/#wif-trends-wif_trends","text":"Wafer Trend Charts by Flash Field For Multiple Variables Slightly different from wif_trend , WIF Trends removes the orange area highlight for major distribution and focus on the median trend comparison between different variables. Further, for the sake of brevity and aesthetics, max number of variables to plot is limited to 4. Below is an example trend chart of the wafer level MR Resistence for both R1 & R2. Please be noted this chart is only recommended for variables which share similar range. When the mean or sigma is much different, please consider using the twin_trends instead. from wfmap.data import load_data from wfmap import wif_trends data = load_data () fig = wif_trends ( data , [ 'MR' , 'MR2' ]) Total running time of the script: ( 0 minutes 3.681 seconds) Download Python source code: plot_6_wif_trends.py Download Jupyter notebook: plot_6_wif_trends.ipynb Gallery generated by mkdocs-gallery","title":"WIF Trends wif_trends"},{"location":"generated/gallery/plot_7_twin_trends/","text":"Note Click here to download the full example code TwinY Trends twin_trends \u00b6 Wafer Trend Charts by Flash Field with Dual Y-axis Have the advantage of double Y-axis, we\u2019re able to put two very different variables into same subplot for comparison. Take below chart for example, there\u2019s ~200ohm gap between MR & MRR , yet two variables have similar sigma. You can find that MR basically overlaps with MRR , the correlation between MR & `MRR could be easily deduced from this chart. from wfmap.data import load_data from wfmap import twin_trends import scipy.stats.distributions as dist data = load_data () . query ( '80<MR<180' ) norm = dist . norm_gen () data [ 'MRR' ] = 200 + data [ 'MR' ] + \\ norm . rvs ( data [ 'MR' ] . median (), data [ 'MR' ] . std (), size = len ( data [ 'MR' ])) fig = twin_trends ( data , 'MR' , 'MRR' ) # When two variables not only have very different mean, the sigma is also not at the same level. The scale could no longer keep the same for Y & 2nd-Y axis, then need to adjust it as `fix_scale=False`. fig2 = twin_trends ( data , 'MR' , 'HDI' , fix_scale = False ) Traceback (most recent call last): File \"F:/wfmap/docs/examples/plot_7_twin_trends.py\" , line 25 , in <module> fig2 = twin_trends ( data , 'MR' , 'HDI' , fix_scale = False ) TypeError : twin_trends() got an unexpected keyword argument 'fix_scale' Total running time of the script: ( 0 minutes 4.586 seconds) Download Python source code: plot_7_twin_trends.py Download Jupyter notebook: plot_7_twin_trends.ipynb Gallery generated by mkdocs-gallery","title":"TwinY Trends `twin_trends`"},{"location":"generated/gallery/plot_7_twin_trends/#twiny-trends-twin_trends","text":"Wafer Trend Charts by Flash Field with Dual Y-axis Have the advantage of double Y-axis, we\u2019re able to put two very different variables into same subplot for comparison. Take below chart for example, there\u2019s ~200ohm gap between MR & MRR , yet two variables have similar sigma. You can find that MR basically overlaps with MRR , the correlation between MR & `MRR could be easily deduced from this chart. from wfmap.data import load_data from wfmap import twin_trends import scipy.stats.distributions as dist data = load_data () . query ( '80<MR<180' ) norm = dist . norm_gen () data [ 'MRR' ] = 200 + data [ 'MR' ] + \\ norm . rvs ( data [ 'MR' ] . median (), data [ 'MR' ] . std (), size = len ( data [ 'MR' ])) fig = twin_trends ( data , 'MR' , 'MRR' ) # When two variables not only have very different mean, the sigma is also not at the same level. The scale could no longer keep the same for Y & 2nd-Y axis, then need to adjust it as `fix_scale=False`. fig2 = twin_trends ( data , 'MR' , 'HDI' , fix_scale = False ) Traceback (most recent call last): File \"F:/wfmap/docs/examples/plot_7_twin_trends.py\" , line 25 , in <module> fig2 = twin_trends ( data , 'MR' , 'HDI' , fix_scale = False ) TypeError : twin_trends() got an unexpected keyword argument 'fix_scale' Total running time of the script: ( 0 minutes 4.586 seconds) Download Python source code: plot_7_twin_trends.py Download Jupyter notebook: plot_7_twin_trends.ipynb Gallery generated by mkdocs-gallery","title":"TwinY Trends twin_trends"},{"location":"generated/gallery/plot_8_wif_corrplot/","text":"Note Click here to download the full example code WIF Corrrelation Plot wif_corrplot \u00b6 Corrrelation Plot by Flash Field Between Two Variables wif_corrplot is created to further investigate relationship between two variables. Beside the basic scatterplot, regression fitting line and R_squared annotation are both included. from wfmap.data import load_data from wfmap import wif_corrplot import scipy.stats.distributions as dist data = load_data () . query ( '80<MR<180' ) norm = dist . norm_gen () data [ 'Fit' ] = data [ 'MR' ] + \\ norm . rvs ( data [ 'MR' ] . median (), data [ 'MR' ] . std (), size = len ( data [ 'MR' ])) fig = wif_corrplot ( data , 'MR' , 'Fit' ) Linear regression is applied by default, while polynomial fit is also supported, modify the fit_deg to see the outcome. data [ 'Fit2' ] = ( data [ 'MR' ] - data [ 'MR' ] . median ()) ** 2 + data [ 'MR' ] * \\ norm . rvs ( data [ 'MR' ] . median (), data [ 'MR' ] . std (), size = len ( data [ 'MR' ])) fig2 = wif_corrplot ( data , 'MR' , 'Fit2' , fit_deg = 2 ) Total running time of the script: ( 0 minutes 5.227 seconds) Download Python source code: plot_8_wif_corrplot.py Download Jupyter notebook: plot_8_wif_corrplot.ipynb Gallery generated by mkdocs-gallery","title":"WIF Corrrelation Plot `wif_corrplot`"},{"location":"generated/gallery/plot_8_wif_corrplot/#wif-corrrelation-plot-wif_corrplot","text":"Corrrelation Plot by Flash Field Between Two Variables wif_corrplot is created to further investigate relationship between two variables. Beside the basic scatterplot, regression fitting line and R_squared annotation are both included. from wfmap.data import load_data from wfmap import wif_corrplot import scipy.stats.distributions as dist data = load_data () . query ( '80<MR<180' ) norm = dist . norm_gen () data [ 'Fit' ] = data [ 'MR' ] + \\ norm . rvs ( data [ 'MR' ] . median (), data [ 'MR' ] . std (), size = len ( data [ 'MR' ])) fig = wif_corrplot ( data , 'MR' , 'Fit' ) Linear regression is applied by default, while polynomial fit is also supported, modify the fit_deg to see the outcome. data [ 'Fit2' ] = ( data [ 'MR' ] - data [ 'MR' ] . median ()) ** 2 + data [ 'MR' ] * \\ norm . rvs ( data [ 'MR' ] . median (), data [ 'MR' ] . std (), size = len ( data [ 'MR' ])) fig2 = wif_corrplot ( data , 'MR' , 'Fit2' , fit_deg = 2 ) Total running time of the script: ( 0 minutes 5.227 seconds) Download Python source code: plot_8_wif_corrplot.py Download Jupyter notebook: plot_8_wif_corrplot.ipynb Gallery generated by mkdocs-gallery","title":"WIF Corrrelation Plot wif_corrplot"}]}